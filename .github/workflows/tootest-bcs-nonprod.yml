name: Build And Deploy To Dev
on:
  workflow_dispatch:
    inputs:
    logLevel:
      description: 'Log level'
      required: true
      default: 'warning'
  push:
    branches:
      - main

env:
  REGION_ID: cn-shanghai
  ACR_EE_REGISTRY: xom-ecomm-acr02-registry.cn-shanghai.cr.aliyuncs.com
  ACR_EE_INSTANCE_ID: cri-3fynibeigjxpi5o6
  ACR_EE_NAMESPACE: toottest
  ACR_EE_IMAGE: bcs-product

jobs:
  deploy:
    name: Build And Deploy To Dev
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '5.0.x' ]
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build Tootest_BCS_ProductManagement --configuration Release --no-restore

      - name: Login to ACR EE with the AccessKey pair
        uses: aliyun/acr-login@v1
        with:
          login-server: "https://${{ env.ACR_EE_REGISTRY }}"
          region-id: "${{ env.REGION_ID }}"
          access-key-id: "${{ secrets.ALICLOUD_ACCESS_KEY }}"
          access-key-secret: "${{ secrets.ALICLOUD_SECRET_KEY }}"
          instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"

      - name: Generate secret from docker config
        run: |
          BASE64=$(cat ${{ env.DOCKER_CONFIG }}/config.json | base64 -w 0)
          sed -i "s/BASE64_CREDENTIAL/$BASE64/g" ./kubernetes/pullImageSecret.yml

      - name: Get github sha
        run: |
          GITHUB_SHA=$(git rev-parse HEAD)
          sed -i "s/GITHUB_SHA/$GITHUB_SHA/g" ./kubernetes/deploy.yml

      - name: Build and Push to ACR
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: "${{ env.ACR_EE_REGISTRY }}/${{ env.ACR_EE_NAMESPACE }}/${{ env.ACR_EE_IMAGE }}:${{ github.sha }}"

      - name: Setting context for Kubernetes cluster of Alibaba Cloud Kubernetes Service (ACK)
        uses: aliyun/ack-set-context@v1
        with:
          access-key-id: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          access-key-secret: ${{ secrets.ALICLOUD_SECRET_KEY }}
          cluster-id: ${{ secrets.NON_PROD_ACK_CLUSTER_ID }}

      - name: Apply YAML to tootest
        run: |
          cp kubernetes/pullImageSecret.yml kubernetes/pullImageSecret_tootest.yml
          cp kubernetes/deploy.yml kubernetes/deploy_tootest.yml
          cp kubernetes/service.yml kubernetes/service_tootest.yml
          sed -i "s/NAMESPACE_VAR/tootest/g" kubernetes/pullImageSecret_tootest.yml kubernetes/deploy_tootest.yml kubernetes/service_tootest.yml
          sed -i "s/NAMESPACE_SHORT_VAR/tootest/g" kubernetes/deploy_tootest.yml
          kubectl apply -R -f kubernetes/namespace.yml -f kubernetes/pullImageSecret_tootest.yml -f kubernetes/deploy_tootest.yml -f kubernetes/service_tootest.yml

      - name: Wait for Deploy
        run: |
          kubectl rollout status -f kubernetes/deploy_tootest.yml

      - name: Failed run
        if: ${{ failure() }}
        run: |
          kubectl rollout undo -f kubernetes/deploy_tootest.yml